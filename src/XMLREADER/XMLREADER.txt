#include "tinyxml.h"
#include <iostream>
#include <string>
#include <vector> // For storing job information
#include "../Job.h"

using namespace std;

struct DeviceInfo{
    string deviceName;
    string emissions;
    string speed;
};

struct JobInfo {
    string jobNumber;
    string pageCount;
    string userName;
};

int readerXML(Job& job) {

    // Vector to store device information
    vector<DeviceInfo> deviceInfoList;
    // Vector to store job information
    vector<JobInfo> jobInfoList;


    TiXmlDocument doc;
    if (!doc.LoadFile("C:\\Users\\Boss\\Desktop\\A.J._23-24\\PSE\\testFolder\\XMLREADER\\data.xml")) {
        cerr << "Failed to load file: " << doc.ErrorDesc() << endl;
        return 1;
    }

    TiXmlElement* root = doc.FirstChildElement("SYSTEM");
    if (!root) {
        cerr << "Failed to find root element SYSTEM." << endl;
        return 1;
    }

// Loop through DEVICE elements
    for (TiXmlElement* deviceElement = root->FirstChildElement("DEVICE"); deviceElement; deviceElement = deviceElement->NextSiblingElement("DEVICE")) {
        DeviceInfo deviceInfo;

        // Get name element from DEVICE
        TiXmlElement* nameElement = deviceElement->FirstChildElement("name");
        if (!nameElement) {
            cerr << "Failed to find NAME element for a device." << endl;
            continue;
        }

        // Get emissions element from DEVICE
        TiXmlElement* emissionsElement = deviceElement->FirstChildElement("emissions");
        if (!emissionsElement) {
            cerr << "Failed to find EMISSIONS element for device: " << nameElement->GetText() << endl;
            continue;
        }

        // Get speed element from DEVICE
        TiXmlElement* speedElement = deviceElement->FirstChildElement("speed");
        if (!speedElement) {
            cerr << "Failed to find SPEED element for device: " << nameElement->GetText() << endl;
            continue;
        }

        // Store device information
        deviceInfo.deviceName = nameElement->GetText();
        deviceInfo.emissions = emissionsElement->GetText();
        deviceInfo.speed = speedElement->GetText();

        if (deviceInfo.deviceName.empty()) {
            cerr << "Device name is empty for a device." << endl;
            continue;
        }
        if (deviceInfo.deviceName.empty()) {
            cerr << "Device name is empty." << endl;
            return 1;
        }
        if (deviceInfo.emissions.empty()) {
            cerr << "Emissions is empty." << endl;
            return 1;
        }
        if (deviceInfo.speed.empty()) {
            cerr << "Speed is empty." << endl;
            return 1;
        }
        deviceInfoList.push_back(deviceInfo);

    }



    // Loop through JOB elements
    for (TiXmlElement* jobElement = root->FirstChildElement("JOB"); jobElement; jobElement = jobElement->NextSiblingElement("JOB")) {
        // Get jobNumber, pageCount, and userName elements from JOB
        TiXmlElement* jobNumberElement = jobElement->FirstChildElement("jobNumber");
        TiXmlElement* pageCountElement = jobElement->FirstChildElement("pageCount");
        TiXmlElement* userNameElement = jobElement->FirstChildElement("userName");

        if (jobNumberElement && pageCountElement && userNameElement) {
            JobInfo jobInfo;
            jobInfo.jobNumber = jobNumberElement->GetText();
            jobInfo.pageCount = pageCountElement->GetText();
            jobInfo.userName = userNameElement->GetText();


            jobInfoList.push_back(jobInfo);

        }
        else {
            cerr << "Missing elements in JOB." << endl;
        }
    }
    return 0;
}
